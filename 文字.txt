import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import datasets, models, transforms
import os

# 資料路徑
train_dir = 'path/to/output/train'
val_dir = 'path/to/output/val'

# 參數設定
batch_size = 32
img_size = (224, 224)
num_classes = len(os.listdir(train_dir))
num_epochs = 10
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 資料增強和預處理
data_transforms = {
    'train': transforms.Compose([
        transforms.Resize(img_size),
        transforms.RandomRotation(20),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
    'val': transforms.Compose([
        transforms.Resize(img_size),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ]),
}

# 加載訓練和驗證資料集
train_dataset = datasets.ImageFolder(train_dir, transform=data_transforms['train'])
val_dataset = datasets.ImageFolder(val_dir, transform=data_transforms['val'])

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)

# 載入預訓練 VGG16 模型並修改分類層
model = models.vgg16(pretrained=True)
for param in model.parameters():
    param.requires_grad = False  # 凍結所有參數

# 修改最後的全連接層
model.classifier[6] = nn.Linear(model.classifier[6].in_features, num_classes)
model = model.to(device)

# 定義損失函數和優化器
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.classifier[6].parameters(), lr=1e-4)

# 初始化變量來追蹤最佳驗證準確率
best_val_acc = 0.0

# 訓練模型
for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0
    
    # 訓練過程
    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        
        optimizer.zero_grad()
        
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        
        running_loss += loss.item() * inputs.size(0)
        _, predicted = outputs.max(1)
        total += labels.size(0)
        correct += predicted.eq(labels).sum().item()
    
    epoch_loss = running_loss / len(train_loader.dataset)
    epoch_acc = 100. * correct / total
    print(f"Epoch {epoch+1}/{num_epochs}, Loss: {epoch_loss:.4f}, Accuracy: {epoch_acc:.2f}%")
    
    # 驗證過程
    model.eval()
    val_loss = 0.0
    correct = 0
    total = 0
    with torch.no_grad():
        for inputs, labels in val_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            
            val_loss += loss.item() * inputs.size(0)
            _, predicted = outputs.max(1)
            total += labels.size(0)
            correct += predicted.eq(labels).sum().item()
    
    val_loss = val_loss / len(val_loader.dataset)
    val_acc = 100. * correct / total
    print(f"Validation Loss: {val_loss:.4f}, Validation Accuracy: {val_acc:.2f}%")

    # 儲存最佳模型
    if val_acc > best_val_acc:
        best_val_acc = val_acc
        torch.save(model.state_dict(), 'best_vgg16_classifier_model.pth')
        print("儲存最佳模型，目前驗證準確率：", best_val_acc)

print("訓練結束，最佳模型已儲存。")

# 推理模式下使用模型
model.load_state_dict(torch.load('best_vgg16_classifier_model.pth'))
model.eval()  # 設定為評估模式以確保結果一致

def predict_image(image_path):
    """預測單張圖片"""
    image = Image.open(image_path)
    image = data_transforms['val'](image).unsqueeze(0).to(device)
    
    with torch.no_grad():
        output = model(image)
        _, predicted = output.max(1)
    return predicted.item()

# 測試同一張圖片並獲取一致的結果
image_path = 'path/to/test_image.jpg'
prediction = predict_image(image_path)
print("圖片分類結果：", prediction)